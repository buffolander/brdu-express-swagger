swagger: "2.0"
info:
  title: Sample API
  description: >-
    Add your API description here; apply markdown if you whish.
  version: 1.0.0
host: api.example.com
basePath: /v1
schemes:
  - https
paths:
  /users:
    post:
      operationId: usersCreate
      summary: >-
        Creates a new User
      description: >-
        Optional extended description in Markdown
      parameters:
        - $ref: "#/parameters/user"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          $ref: "#/responses/200_userCreate"
        400:
          $ref: "#/responses/400"
  /users/{user_id}:
    get:
      operationId: usersGet
      summary: >-
        Retrieve User data
      description: >-
        Optional extended description in Markdown
      parameters:
        - $ref: "#/parameters/user_id"
      produces:
        - application/json
      responses:
        200:
          $ref: "#/responses/200_userData"
        400:
          $ref: "#/responses/400"
        404:
          $ref: "#/responses/404"
definitions:
  User:
    type: object
    required:
      - name
      - email
    properties:
      name:
        type: string
      email:
        type: string
        format: email
      birthday:
        type: string
        format: date
parameters:
  user_id:
    name: user_id
    in: path
    required: true
    type: string
    description: >-
      Parameter description in markdown
  user:
    name: user
    in: body
    schema:
      $ref: "#/definitions/User"
responses:
  200_userCreate:
    description: ok
    schema:
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          default: true
        data:
          type: object
          allOf:
            - properties:
                user_id:
                  type: string
            - $ref: "#/definitions/User"
  200_userData:
    description: ok
    schema:
      required:
        - ok
        - data
      properties:
        ok:
          type: boolean
          default: true
        data:
          type: object
          allOf:
            - properties:
                user_id:
                  type: string
            - $ref: "#/definitions/User"
  400:
    description: bad_request
    schema:
      required:
        - ok
        - message
        - error
      properties:
        ok:
          type: boolean
          default: false
        message:
          type: string
          default: bad_request
        error:
          type: object
          description: >-
            Detailed error information; required fields, invalid types, invalid enums
  404:
    description: not_found
    schema:
      required:
        - ok
        - message
      properties:
        ok:
          type: boolean
          default: false
        message:
          type: string
          default: not_found
